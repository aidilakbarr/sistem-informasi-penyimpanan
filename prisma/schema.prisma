// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(uuid())
  name                     String
  email                    String    @unique
  password                 String
  emailVerified            Boolean   @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?
  refreshToken             String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  lastLogin                DateTime?
  profilePicture           String?
  role                     Role      @default(USER)

  pemesanan        Pemesanan[]
  chatRoomsAsUser  ChatRoom[]    @relation("UserRooms")
  chatRoomsAsAdmin ChatRoom[]    @relation("AdminRooms")
  messages         ChatMessage[]
}

enum Role {
  ADMIN
  USER
}

model Pemesanan {
  id                String   @id @default(uuid())
  nama              String
  fotoBarang        String[]
  deskripsiBarang   String?
  durasiPenyimpanan String
  ukuranBarang      String
  catatan           String?
  harga             Int?
  penjemputan       String
  isAccepted        Boolean  @default(false)
  status            Status   @default(WAITING)
  rejectMessage     String?
  paid              Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  WAITING
  ACCEPTED
  REJECTED
  COMPLETED
}

model ChatRoom {
  id        String        @id @default(uuid())
  user      User          @relation("UserRooms", fields: [userId], references: [id])
  userId    String        @unique
  admin     User          @relation("AdminRooms", fields: [adminId], references: [id])
  adminId   String
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
}

model ChatMessage {
  id        String   @id @default(uuid())
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  message   String
  image     String?
  createdAt DateTime @default(now())
}
